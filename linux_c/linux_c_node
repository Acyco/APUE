                         linux_c系统开发学习笔记
I/O ：input & output 是一切实现的基础
      stdio标准IO sysio系统调用IO(文件IO)

stdio: FILE类型贯穿始终

fopen();
fclose();

fgetc();
fputc();
fgets();
fputs();
fread();
fwrite();

printf();
fprintf();
springf();
snprintf();
scanf();
fscanf();
sscanf();

fseek();
ftell();
rewind();

fseeko();
ftello();

fflush();

getline();

临时文件： 1、如何不冲突  2、 及时销毁
tmpnam 只给一个可用的文件名，还要自己创建文件 共需要两步 不是原子操作，不安全
tmpfile  不需要名字 而且返回的是FILE 也就不会有冲突 一个文件如果没有一个硬连接指向它，而且打开文件计数又为0值，这个文件就释放了，要不要close都可以


文件IO/系统调用IO
fd 是在文件IO中贯穿始终的类型

文件描述符的概念
文件IO操作： open,close,read,write,lseek
文件IO与标准IO的区别
区别： 响应速度&吞吐量 标准IO 有缓冲区 可以缓冲到一定数据量 再调用  平时通常使用标准IO
提醒：标准IO与文件IO不能混用。
转换： fileno, fdopen

IO的效率问题
习题：将mycpy.c程序进行更改，将BUFSIZE的值进行放大，并观察进程所消耗的时间，注意性能的最佳拐点出现时的BUFSIZE值，以及何时程序会出问题。

文件共享：多个任务共同操作一个文件或者协同完成任务
面试：写程序删除一个文件的第10行
补充函数：truncate/ftruncate.

原子操作：不可分割的操作
原子：不可分割的最小单位
原子操作的作用：解决竞争和冲突
如：tmpnam

程序中的重定向：dup dup2
同步： sync, fsync, fdatasync(macos not)
fcntl()：文件描述符所变的魔术几乎都来源于该函数
ioctl()：设备相关的内容

/dev/fd/目录： 虚目录 当前进程的文件描述符信息

