                         linux_c系统开发学习笔记
I/O ：input & output 是一切实现的基础
      stdio标准IO sysio系统调用IO(文件IO)

stdio: FILE类型贯穿始终

fopen();
fclose();

fgetc();
fputc();
fgets();
fputs();
fread();
fwrite();

printf();
fprintf();
springf();
snprintf();
scanf();
fscanf();
sscanf();

fseek();
ftell();
rewind();

fseeko();
ftello();

fflush();

getline();

临时文件： 1、如何不冲突  2、 及时销毁
tmpnam 只给一个可用的文件名，还要自己创建文件 共需要两步 不是原子操作，不安全
tmpfile  不需要名字 而且返回的是FILE 也就不会有冲突 一个文件如果没有一个硬连接指向它，而且打开文件计数又为0值，这个文件就释放了，要不要close都可以


文件IO/系统调用IO
fd 是在文件IO中贯穿始终的类型

文件描述符的概念
文件IO操作： open,close,read,write,lseek
文件IO与标准IO的区别
区别： 响应速度&吞吐量 标准IO 有缓冲区 可以缓冲到一定数据量 再调用  平时通常使用标准IO
提醒：标准IO与文件IO不能混用。
转换： fileno, fdopen

IO的效率问题
习题：将mycpy.c程序进行更改，将BUFSIZE的值进行放大，并观察进程所消耗的时间，注意性能的最佳拐点出现时的BUFSIZE值，以及何时程序会出问题。

文件共享：多个任务共同操作一个文件或者协同完成任务
面试：写程序删除一个文件的第10行
补充函数：truncate/ftruncate.

原子操作：不可分割的操作
原子：不可分割的最小单位
原子操作的作用：解决竞争和冲突
如：tmpnam

程序中的重定向：dup dup2
同步： sync, fsync, fdatasync(macos not)
fcntl()：文件描述符所变的魔术几乎都来源于该函数
ioctl()：设备相关的内容

/dev/fd/目录： 虚目录 当前进程的文件描述符信息

/*************************************************************************************/

文件系统：
一、目录和文件

类ls的实现,如myls， -l -a -i -n

1、获取文件属性
    stat：通过文件路径获取属性，面对符号链接文件时获取的是所指向的目标文件
    fstat：能过文件描述符获取属性
    lstat：面对符号链接文件时获取的是符号链接文件的属性

2、文件访问权限
    st_mode是一个16位的位图，用于表示文件类型，访问权限，及特殊权限位

3、umask
    作用：防止产生权限过松的文件

4、文件权限的更改/管理
    chmod
    fchmod

5、粘住位
    t位

6、文件系统：FAT,UFS
    文件系统：文件或数据的存储和管理

7、硬链接、符号链接
    硬链接与目录项是同义词，且建立硬链接有限制，不能给分区建立，不能给目录建立，符号链接：可以跨分区，可以给目录建立
    link
    unlink
    remove
    rename

8、utime： 可更改文件的最后读的时间和最后修改的时间

9、目录的创建和销毁
    mkdir
    rmdir

10、更改当前工作路径
    chdir
    fchdir
    getcwd

11、分析目录/读取目录内容
glob(): 解析模式/通配符


opendir();
closedir();
readdir();
rewinddir();
seekdir();
telldir();

二、系统数据文件和信息

1 /etc/passwd
    getpwuid();
    getpwnam();

2 /etc/group
    getgrgid();
    getgrgrnam();

3 /etc/shadow
    getspnam();
    crypt();
    getpass();

4 时间戳：time_t   char *  struct tm
    time();
    gettime();
    localtime();
    mktime();
    strftime();

三、进程环境

1 main函数
    int main(int argc, char *argv[])

2 进程的终止
    正常终止：
        从main函数返回
        调用exit
        调用_exit或_Exit
        最后一个线程从其启动例程返回
        最后一个线程调用ptherad_exit

    异常终止：
        调用abort
        接到一个信号并终止
        最后一个线程对其取消请求作出响应

    atexit(); 钩子函数

3 命令行参数的分析
    getopt();
    getopt_long();

4 环境变量
    KEY = VALUE
    getenv();
    setenv();
    putenv();

5 C程序的存储空间布局
    pmap(1); 命令行指令

6 库
    动态库
    静态库
    手工装载库
    dlopen();
    dlclose();
    dlerror();
    dlsym();

7 函数跳转
    goto;
    setjmp();
    longjmp();

8 资源的获取及控制
    getrlimit();
    setrlimit();



/*************************************************************************************/

                    进程基本知识
已经进入多进程阶段

1、 进程标识符
    类型pid_t 通常是有符号16位整形数
    命令ps
    进程号是顺次向下使用
    getpid();
    getppid();

2、进程的产生
    fork()：
    注意理解关键字： duplication,意味着拷贝，克隆，一模一样等含义
    fork后父子进程的区别： fork的返回值不一样， pid不同， ppid也不同， 未决信号和文件锁骨不继承，资源利用量清0
    init进程：1号， 是所有进程的祖先进程。
    调度器的调度策略来决定哪个进程先运行
    fflush()的重要性。

    vfork();

3、进程的消亡及释放资源
    wait();
    waitpid();
    waitid();
    wait3();
    wait4();

4、exec函数族
    execl();
    execlp();
    execle();
    execv();
    execvp();
    注意：fflush()

5、用户权限及组权限(u+s,g+s)
    getuid();
    geteuid();
    getgid();
    getegid();
    setuid();
    setgid();
    setreuid();
    setregid();
    seteuid();
    setegid();

6、观摩课：解释器文件

7、system();
    理解： fork+exec+wait封装

8、进程会计
    acct();

9、进程时间
    times();

10、守护进程
    会话session,标识sid
    终端
    setsid();
    getpgrp();
    单实例守护进程： 锁文件 /var/run/name.pid
    启动脚本文件：/etc/rc*....

11、系统日志
    syslogd服务
    openlog();
    syslog();
    closelog();

/*************************************************************************************/

                            并发（信号、线程）

同步
异步

异步事件的处理： 查询法，通知法


一、信号
1、信号的概念
    信号是软件中断。
    信号的响应依赖于中断。

2、signal();
    void (*signal(int signum, void (*func)(int)))(int);
    信号会打断阻塞 断系统调用

3、信号的不可靠

4、可重入函数
    所有的系统调用都是可重入的，一部分库函数也是可重入的，如：memcpy

5、信号的响应过程
    信号从收到到响应有一个不可避免的延迟
    思考： 如何忽略掉一个信号的？
          标准信号为什么要丢失
          标准信号的响应没有严格的顺序

6、常用函数
    kill();
    raise();

    alarm();
    setitimer();
 例：使用单一计时器，利用alarm或setitimer构造一组函数，实现任意数量计时器

    pause();
    abort());
    system();

    sleep();
    nonasleep();
    usleep();
    select();

7、信号集
8、信号屏蔽字/pending集处理
9、扩展
    sigsuspend();
    sigaction();
    setitimer();
10、实时信号

二、线程